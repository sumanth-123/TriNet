import torch
from torch import nn


class VGGBlock(nn.Module):
    def __init__(self, in_channels, middle_channels, out_channels):
        super().__init__()
        self.relu = nn.ReLU(inplace=True)
        self.conv1 = nn.Conv2d(in_channels, middle_channels, 3, padding=1)
        self.bn1 = nn.BatchNorm2d(middle_channels)
        self.conv2 = nn.Conv2d(middle_channels, out_channels, 3, padding=1)
        self.bn2 = nn.BatchNorm2d(out_channels)

    def forward(self, x):
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)
        return out
    
    

class TriNet(nn.Module):
    def __init__(self, num_classes=49, input_channels=1, deep_supervision=False, **kwargs):
        super().__init__()

        nb_filter = [32, 64, 128, 256, 512]

        self.deep_supervision = deep_supervision

        self.pool = nn.MaxPool2d(2, 2)
        self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)

        self.conv0_0 = VGGBlock(input_channels, nb_filter[0], nb_filter[0])
        self.conv1_0 = VGGBlock(nb_filter[0], nb_filter[1], nb_filter[1])
        self.conv2_0 = VGGBlock(nb_filter[1], nb_filter[2], nb_filter[2])
        self.conv3_0 = VGGBlock(nb_filter[2], nb_filter[3], nb_filter[3])
        self.conv4_0 = VGGBlock(nb_filter[3], nb_filter[4], nb_filter[4])

        self.conv0_1 = VGGBlock(nb_filter[0]+nb_filter[1], nb_filter[0], nb_filter[0])
        self.conv1_1 = VGGBlock(nb_filter[1]+nb_filter[2], nb_filter[1], nb_filter[1])
        self.conv2_1 = VGGBlock(nb_filter[2]+nb_filter[3], nb_filter[2], nb_filter[2])
        self.conv3_1 = VGGBlock(nb_filter[3]+nb_filter[4], nb_filter[3], nb_filter[3])

        self.conv0_2 = VGGBlock(nb_filter[0]*2+nb_filter[1], nb_filter[0], nb_filter[0])
        self.conv1_2 = VGGBlock(nb_filter[1]*2+nb_filter[2], nb_filter[1], nb_filter[1])
        self.conv2_2 = VGGBlock(nb_filter[2]*2+nb_filter[3], nb_filter[2], nb_filter[2])

        self.conv0_3 = VGGBlock(nb_filter[0]*3+nb_filter[1], nb_filter[0], nb_filter[0])
        self.conv1_3 = VGGBlock(nb_filter[1]*3+nb_filter[2], nb_filter[1], nb_filter[1])

        self.conv0_4 = VGGBlock(nb_filter[0]*4+nb_filter[1], nb_filter[0], nb_filter[0])
        
        
        self.conv0_0_n = VGGBlock(input_channels, nb_filter[0], nb_filter[0])
        self.conv1_0_n = VGGBlock(nb_filter[0], nb_filter[1], nb_filter[1])
        self.conv2_0_n = VGGBlock(nb_filter[1], nb_filter[2], nb_filter[2])
        self.conv3_0_n = VGGBlock(nb_filter[2], nb_filter[3], nb_filter[3])
        self.conv4_0_n = VGGBlock(nb_filter[3], nb_filter[4], nb_filter[4])

        self.conv0_1_n = VGGBlock(nb_filter[0]+nb_filter[1], nb_filter[0], nb_filter[0])
        self.conv1_1_n = VGGBlock(nb_filter[1]+nb_filter[2], nb_filter[1], nb_filter[1])
        self.conv2_1_n = VGGBlock(nb_filter[2]+nb_filter[3], nb_filter[2], nb_filter[2])
        self.conv3_1_n = VGGBlock(nb_filter[3]+nb_filter[4], nb_filter[3], nb_filter[3])

        self.conv0_2_n = VGGBlock(nb_filter[0]*2+nb_filter[1], nb_filter[0], nb_filter[0])
        self.conv1_2_n = VGGBlock(nb_filter[1]*2+nb_filter[2], nb_filter[1], nb_filter[1])
        self.conv2_2_n = VGGBlock(nb_filter[2]*2+nb_filter[3], nb_filter[2], nb_filter[2])

        self.conv0_3_n = VGGBlock(nb_filter[0]*3+nb_filter[1], nb_filter[0], nb_filter[0])
        self.conv1_3_n = VGGBlock(nb_filter[1]*3+nb_filter[2], nb_filter[1], nb_filter[1])

        self.conv0_4_n = VGGBlock(nb_filter[0]*4+nb_filter[1], nb_filter[0], nb_filter[0])


        if self.deep_supervision:
            self.final1 = nn.Conv2d(nb_filter[0], num_classes, kernel_size=1)
            self.final2 = nn.Conv2d(nb_filter[0], num_classes, kernel_size=1)
            self.final3 = nn.Conv2d(nb_filter[0], num_classes, kernel_size=1)
            self.final4 = nn.Conv2d(nb_filter[0], num_classes, kernel_size=1)
            
            self.final5 = nn.Conv2d(nb_filter[0], 1, kernel_size=3, padding=1)
            self.final6 = nn.Conv2d(nb_filter[0], 1, kernel_size=3, padding=1)
            self.final7 = nn.Conv2d(nb_filter[0], 1, kernel_size=3, padding=1)
            self.final8 = nn.Conv2d(nb_filter[0], 1, kernel_size=3, padding=1)
            
        else:
            self.final  = nn.Conv2d(nb_filter[0], num_classes, kernel_size=1)
            self.finaly = nn.Conv2d(nb_filter[0], 1, kernel_size=3, padding=1)
            
    
    def forward(self, input):
        
        #############segmentation section for fringe order##############   
        x0_0 = self.conv0_0(input)
        x1_0 = self.conv1_0(self.pool(x0_0))
        x0_1 = self.conv0_1(torch.cat([x0_0, self.up(x1_0)], 1))

        x2_0 = self.conv2_0(self.pool(x1_0))
        x1_1 = self.conv1_1(torch.cat([x1_0, self.up(x2_0)], 1))
        x0_2 = self.conv0_2(torch.cat([x0_0, x0_1, self.up(x1_1)], 1))

        x3_0 = self.conv3_0(self.pool(x2_0))
        x2_1 = self.conv2_1(torch.cat([x2_0, self.up(x3_0)], 1))
        x1_2 = self.conv1_2(torch.cat([x1_0, x1_1, self.up(x2_1)], 1))
        x0_3 = self.conv0_3(torch.cat([x0_0, x0_1, x0_2, self.up(x1_2)], 1))

        x4_0 = self.conv4_0(self.pool(x3_0))
        x3_1 = self.conv3_1(torch.cat([x3_0, self.up(x4_0)], 1))
        x2_2 = self.conv2_2(torch.cat([x2_0, x2_1, self.up(x3_1)], 1))
        x1_3 = self.conv1_3(torch.cat([x1_0, x1_1, x1_2, self.up(x2_2)], 1))
        x0_4 = self.conv0_4(torch.cat([x0_0, x0_1, x0_2, x0_3, self.up(x1_3)], 1))

        
  #############regression section for depth profile##############          
        
        y0_1 = self.conv0_1_n(torch.cat([x0_0, self.up(x1_0)], 1))

        y1_1 = self.conv1_1_n(torch.cat([x1_0, self.up(x2_0)], 1))
        y0_2 = self.conv0_2_n(torch.cat([x0_0, y0_1, self.up(y1_1)], 1))

        y2_1 = self.conv2_1_n(torch.cat([x2_0, self.up(x3_0)], 1))
        y1_2 = self.conv1_2_n(torch.cat([x1_0, y1_1, self.up(y2_1)], 1))
        y0_3 = self.conv0_3_n(torch.cat([x0_0, y0_1, y0_2, self.up(y1_2)], 1))

        y3_1 = self.conv3_1_n(torch.cat([x3_0, self.up(x4_0)], 1))
        y2_2 = self.conv2_2_n(torch.cat([x2_0, y2_1, self.up(y3_1)], 1))
        y1_3 = self.conv1_3_n(torch.cat([x1_0, y1_1, y1_2, self.up(y2_2)], 1))
        y0_4 = self.conv0_4_n(torch.cat([x0_0, y0_1, y0_2, y0_3, self.up(y1_3)], 1))

        if self.deep_supervision:
            output1 = self.final1(x0_1)
            output2 = self.final2(x0_2)
            output3 = self.final3(x0_3)
            output4 = self.final4(x0_4)
            
            output1y = self.final5(y0_1)
            output2y = self.final6(y0_2)
            output3y = self.final7(y0_3)
            output4y = self.final8(y0_4)
            return [output1, output1y, output2, output2y, output3, output3y, output4, output4y]

        else:
            output = self.final(x0_4)
            outputy = self.finaly(y0_4)
            return [output, outputy]
    
